filter(math_score$treat==0) ->control
# Control group, mean
mean_value <- mean(star_data$math_score[star_data$treat==0])
# Control group, mimimum
star_data |>
filter(treat==0) |>
select(math_score) |>
min() -> minimum_value
# Control group, mimimum
star_data |>
filter(treat==0) |>
select(math_score) |>
meann() -> average_value
# Control group, mimimum
star_data |>
filter(treat==0) |>
select(math_score) |>
mean() -> average_value
sd_value <- sd(star_data$math_score[star_data$treat==0])
# Control group, mimimum
minimum_value <- min(star_data$math_score[star_data$treat=0])
# Control group, mimimum
minimum_value <- min(star_data$math_score[star_data$treat==0])
minimum_value
# Control group, maximum value
maximum_value <- max(star_data$math_score[star_data$treat==0])
print(n)
print(n)
n
minimum_value
# Control group, n
star_data |>
count(treat==0, TRUE) -> n
n
# Control group, n
n_control <- length(star_data$math_score[star_data$treat==0])
# Control group, n
n_control <-
star_data |>
filter(treat==0)
# Control group, n
n_control <-
star_data |>
filter(treat==0)
# Control group, mimimum
minimum_value <- min(star_data$math_score[star_data$treat==0])
# Control group, mean
mean_value <- mean(star_data$math_score[star_data$treat==0])
# Control group, standard deviation
sd_value <- sd(star_data$math_score[star_data$treat==0])
# Control group, maximum value
maximum_value <- max(star_data$math_score[star_data$treat==0])
n
minimum_value
# Control group, n
n_control <-
star_data |>
filter(treat==0) |>
count()
n_control
print(n_control)
library(tidyverse)
#load the dataset
read.csv("TN_STAR_reduced.csv") ->star_data
view(star_data)
head(star_data)
# Control group, n
n_control <-
star_data |>
filter(treat==0) |>
count()
# Control group, mimimum
minimum_value <- min(star_data$math_score[star_data$treat==0])
# Control group, mean
mean_value <- mean(star_data$math_score[star_data$treat==0])
# Control group, standard deviation
sd_value <- sd(star_data$math_score[star_data$treat==0])
# Control group, maximum value
maximum_value <- max(star_data$math_score[star_data$treat==0])
print (n_control)
print (minimum_value)
library(tidyverse)
#load the dataset
read.csv("TN_STAR_reduced.csv") ->star_data
view(star_data)
head(star_data)
# Control group, n
n_control <-
star_data |>
filter(treat==0) |>
count()
n
# Control group, mimimum
minimum_value <- min(star_data$math_score[star_data$treat==0])
# Control group, mean
mean_value <- mean(star_data$math_score[star_data$treat==0])
# Control group, standard deviation
sd_value <- sd(star_data$math_score[star_data$treat==0])
# Control group, maximum value
maximum_value <- max(star_data$math_score[star_data$treat==0])
print (n_control)
print (minimum_value)
print(sd_value)
sd_value
library(tidyverse)
#load the dataset
read.csv("TN_STAR_reduced.csv") ->star_data
view(star_data)
head(star_data)
# Control group, n
n_control <-
star_data |>
filter(treat==0) |>
count()
# Control group, mimimum
minimum_value <- min(star_data$math_score[star_data$treat==0])
# Control group, mean
mean_value <- mean(star_data$math_score[star_data$treat==0])
# Control group, standard deviation
sd_value <- sd(star_data$math_score[star_data$treat==0])
# Control group, maximum value
maximum_value <- max(star_data$math_score[star_data$treat==0])
print(n)
print(minimum_value)
print(mean_value)
print(sd_value)
print(maximum_value)
#n
n_treat <-
star_data |>
filter(treat==1) |>
count()
# minimum
minimum_value_treat <- min(star_data$math_score[star_data$treat==1])
# mean
mean_value_treat <- mean(star_data$math_score[star_data$treat==0])
# standard_deviation
sd_value_treat <- sd(star_data$math_score[star_data$treat==1])
# mean
mean_value_treat <- mean(star_data$math_score[star_data$treat==1])
# mean
mean_value_treat <- mean(star_data$math_score[star_data$treat==0])
# mean
mean_value_treat <- mean(star_data$math_score[star_data$treat==1])
# maximum value
maximum_value_treat <- max(star_data$math_score[star_data$treat==1])
print(n_treat)
print(minimum_value_treat)
print(mean_value_treat)
print(sd_value_treat)
print(maximum_value_treat)
library(sandwich)
library(lmtest)
library(tidyverse)
library(sandwich)
library(lmtest)
library(lmtest)
library(sandwich)
install.packages("lmtest")
install.packages("sandwich")
library(tidyverse)
library(sandwich)
library(lmtest)
regression_model <- lm(mathscore ~ treat, data = star_data)
regression_model <- star_data |>
lm(mathscore ~ treat, data = star_data)
regression_model <-
lm(mathscore ~ treat, star_data = data)
regression_model <-
lm(mathscore ~ treat, data = star_data)
regression_model <-
lm(math_score ~ treat, data = star_data)
regression_model
robust_covariance <- vcovHC(regression_model, type = "HC3")
View(robust_covariance)
head(robust_covariance)
# Robust standard errors
robust_sd_errors <- coeftest(regression_model, vcov=robust_covariance)
robust_sd_errors
control_group_mean <- mean(star_data$math_score[star_data$treat==0], na.rm = TRUE)
control_group_mean
treatment_group_mean <- mean(star_data$math_score[star_data$treat==1], na.rm = TRUE)
treatment_group_mean
summary(regression_model)
t_test_result <- t.test(math_score ~ treat, data = star_data)
t_test_result
read.csv(Gerber_APSR_Reduced) ->gerber_data
read.csv("Gerber_APSR_Reduced.csv") ->gerber_data
setwd("/Users/jsupeyo/Library/CloudStorage/GoogleDrive-jsupeyo@berkeley.edu/My Drive/University of California, Berkeley/1. Goldman School of Public Policy/1. Classes/2. 2024 Fall/PUB POL 249: Statistics for Program Evaluation/Assignments/Code/Statistics4PE")
read.csv("Gerber_APSR_Reduced.csv") ->gerber_data
read.csv("Gerber_APSR_Reduced.csv") ->gerber_data
read.csv("Gerber_APSR_Reduced.csv") ->gerber_data
read.csv("Gerber_APSR_Reduced.csv") ->gerber_data
head(gerber_data)
regression_model_gerber <- lm(vote ~ treat, data = gerber_data)
regression_model_gerber
regression_model
View(regression_model_gerber)
View(regression_model)
set.seed(05041994)
run_one_experiment(success_prob_control = 0.65,
success_prob_treat = 0.80,
N = 100,
treat_prob = 0.50)
robust_covariance_gerber <- vcovHC(regression_model_gerber, type = "HC3") #robust covariance..."HC3" is usually a good default choice
head(robust_covariance_gerber)
# Robust standard errors
robust_sd_errors_gerber <- coeftest(regression_model_gerber, vcov=robust_covariance_gerber)
robust_sd_errors_gerber
gerber_control_group_mean
gerber_control_group_mean <- mean(gerber_data$vote[gerber_data$treat==0], na.rm=TRUE)
gerber_control_group_mean
gerber_treatment_group_mean <- mean(gerber_data$vote[gerber_data$treat==1], na.rm = TRUE)
gerber_treatment_group_mean
summary(regression_model_gerber)
t_test_result_gerber <- t.test(vote ~ treat, data = gerber_data)
t_test_result_gerber
#| message: false
#| warning: false
library(tidyverse)
library(skimr) # Tidy summary statistics table
library(estimatr) # For "lm_robust"
load("TN_STAR_for_PS2_Bonus.RData")
star |> glimpse()
star |> skim()
View(star)
ggplot(star, aes(y = std_math_score_k)) +
geom_boxplot() +
labs(y = "Standardized math score in Kindergarten")
ggplot(star, aes( x = race, y = test_score, fill = race))+
geom_boxplot()
ggplot(star, aes( x = white, y = std_math_score_k))+
geom_boxplot()
ggplot(star, aes( x = treat, y = std_math_score_k))+
geom_boxplot()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment"+
x= "Random Assignment",
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment"+
x= "Random Assignment",
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores")+
scale_fill_manual(values = c("White" = "lightblue", "Non-White" = "lightgreen")) +
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores")+
scale_fill_manual(values = c("White" = "lightblue", "Non-White" = "lightgreen"))
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores",
)
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores",
col = c("lightblue", "pink"),
names = c("White", "Non-White"),
notch = TRUE)
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores")
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores")+
scale_fill_manual(values = c("White" = "lightblue", "Non-White" = "pink")) +
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores")+
scale_fill(values = c("White" = "lightblue", "Non-White" = "pink")) +
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores")+
scale_fill_manual(values = c("White" = "lightblue", "Non-White" = "pink")) +
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores")
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores")+
scale_fill_manual(values = c("White" = "lightblue", "Non-White" = "pink"))
?scale_fill_manual
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot(fill = white)+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores")+
scale_fill_manual(values = c("White" = "lightblue", "Non-White" = "pink"))
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores")+
scale_fill_manual(values = c("White" = "lightblue", "Non-White" = "pink"))
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores")+
scale_fill_manual(values = c("1" = "lightblue", "0" = "pink"))+
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores")+
scale_fill_manual(values = c("White" = "lightblue", "Non-White" = "pink"),
labels = c("White Students", "Non-White Students"))+
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores")+
scale_fill_manual(values = c("1" = "lightblue", "0" = "pink"),
labels = c("White Students", "Non-White Students"))+
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores",
fill="Student Race")+
scale_fill_manual(values = c("1" = "lightblue", "0" = "pink"),
labels = c("White Students", "Non-White Students"))+
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Treatment",
x= "Random Assignment",
y = "Standard Math Scores",
fill="Student Race")+
scale_fill_manual(values = c("1" = "lightblue", "0" = "pink"),
labels = c("White Students", "Non-White Students"))+
theme_minimal()
ggplot(star, aes(x = white, y = std_math_score_k, fill = white))+
geom_boxplot()
ggplot(star, aes(x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()
ggplot(star, aes(x = white, y = std_math_score_k, fill = white))+
geom_boxplot()
theme_minimal()
ggplot(star, aes(x = white, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Race",
x= "Race",
y= "Standard Math Score",
fill="Race")+
scale_fill_manual(values = c("1"="lightblue","0"="pink"),
labels = c("White Students", "Non White Students"))+
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Assignment",
x= "Random Assignment",
y = "Standard Math Scores",
fill="Student Race")+
scale_fill_manual(values = c("1" = "lightblue", "0" = "pink"),
labels = c("White Students", "Non-White Students"))+
theme_minimal()
ggplot(star, aes(x = white, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Race",
x= "Race",
y= "Standard Math Score",
fill="Student Race")+
scale_fill_manual(values = c("1"="lightblue","0"="pink"),
labels = c("White Students", "Non White Students"))+
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Assignment",
x= "Random Assignment",
y = "Standard Math Scores",
fill="Student Race")+
scale_fill_manual(values = c("1" = "lightblue", "0" = "pink"),
labels = c("White Students", "Non-White Students"))+
theme_minimal()
ggplot(star, aes(x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Race",
x= "Race",
y= "Standard Math Score",
fill="Student Race")+
scale_fill_manual(values = c("1"="lightblue","0"="pink"),
labels = c("White Students", "Non White Students"))+
theme_minimal()
ggplot(star, aes(x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Treatment",
x= "Race",
y= "Standard Math Score",
fill="Student Race")+
scale_fill_manual(values = c("1"="lightblue","0"="pink"),
labels = c("White Students", "Non White Students"))+
theme_minimal()
ggplot(star, aes(x = treat, y = std_math_score_k, fill = treat))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Treatment",
x= "Race",
y= "Standard Math Score",
fill="Student Race")+
scale_fill_manual(values = c("1"="lightblue","0"="pink"),
labels = c("White Students", "Non White Students"))+
theme_minimal()
ggplot(star, aes(x = white, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Race",
x= "Race",
y= "Standard Math Score",
fill="Student Race")+
scale_fill_manual(values = c("0"="lightblue","1"="pink"),
labels = c("Non White Students", "White Students"))+
theme_minimal()
ggplot(star, aes(x = treat, y = std_math_score_k, fill = treat))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Treatment",
x= "Race",
y= "Standard Math Score",
fill="Treatment")+
scale_fill_manual(values = c("0"="lightblue","1"="pink"),
labels = c("Control Group", "Treatment Group"))+
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Assignment",
x= "Random Assignment",
y = "Standard Math Scores",
fill="Student Race")+
scale_fill_manual(values = c("0" = "lightblue", "1" = "pink"),
labels = c("Non-White Students", "White Students"))+
theme_minimal()
ggplot(star, aes(x = white, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Race",
x= "Race",
y= "Standard Math Score",
fill="Student Race")+
scale_fill_manual(values = c("0"="lightblue","1"="pink"),
labels = c("Non-White Students", "White Students"))+
theme_minimal()
View(star)
View(star)
#load the dataset
read.csv("TN_STAR_reduced.csv") ->star_data
view(star_data)
head(star_data)
load("TN_STAR_for_PS2_Bonus.RData")
star |> glimpse()
star |> skim()
ggplot(star, aes(y = std_math_score_k)) +
geom_boxplot() +
labs(y = "Standardized math score in Kindergarten")
ggplot(star, aes(x = white, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Race",
x= "Race",
y= "Standard Math Score",
fill="Student Race")+
scale_fill_manual(values = c("0"="lightblue","1"="pink"),
labels = c("Non-White Students", "White Students"))+
theme_minimal()
ggplot(star, aes(x = treat, y = std_math_score_k, fill = treat))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Treatment",
x= "Race",
y= "Standard Math Score",
fill="Treatment")+
scale_fill_manual(values = c("0"="lightblue","1"="pink"),
labels = c("Control Group", "Treatment Group"))+
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Race and Assignment",
x= "Random Assignment",
y = "Standard Math Scores",
fill="Student Race")+
scale_fill_manual(values = c("0" = "lightblue", "1" = "pink"),
labels = c("Non-White Students", "White Students"))+
theme_minimal()
lm_robust(std_math_score_k ~ treat, data = star)
lm_robust(std_math_score_k ~ white, data = star)
View(star)
View(star)
