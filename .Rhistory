# minimum
minimum_value_treat <- min(star_data$math_score[star_data$treat==1])
# mean
mean_value_treat <- mean(star_data$math_score[star_data$treat==1])
# standard_deviation
sd_value_treat <- sd(star_data$math_score[star_data$treat==1])
# maximum value
maximum_value_treat <- max(star_data$math_score[star_data$treat==1])
print(n_treat)
print(minimum_value_treat)
print(mean_value_treat)
print(sd_value_treat)
print(maximum_value_treat)
# Regression model
regression_model <-
lm(math_score ~ treat, data = star_data)
regression_model
# Robust standard errors
robust_covariance <- vcovHC(regression_model, type = "HC1") #robust covariance..."HC1" is usually a good default choice
robust_covariance
# Robust standard errors
robust_sd_errors <- coeftest(regression_model, vcov=robust_covariance)
robust_sd_errors
control_group_mean <- mean(star_data$math_score[star_data$treat==0], na.rm = TRUE)
control_group_mean
treatment_group_mean <- mean(star_data$math_score[star_data$treat==1], na.rm = TRUE)
treatment_group_mean
summary(regression_model)
t_test_result <- t.test(math_score ~ treat, data = star_data)
t_test_result
read.csv("Gerber_APSR_Reduced.csv") ->gerber_data
head(gerber_data)
# regression model
regression_model_gerber <- lm(vote ~ treat, data = gerber_data)
regression_model_gerber
# Robust standard errors
robust_covariance_gerber <- vcovHC(regression_model_gerber, type = "HC1") #robust covariance..."HC1" is usually a good default choice
robust_covariance_gerber
# Robust standard errors
robust_sd_errors_gerber <- coeftest(regression_model_gerber, vcov=robust_covariance_gerber)
robust_sd_errors_gerber
gerber_control_group_mean <- mean(gerber_data$vote[gerber_data$treat==0], na.rm=TRUE)
gerber_control_group_mean
gerber_treatment_group_mean <- mean(gerber_data$vote[gerber_data$treat==1], na.rm = TRUE)
gerber_treatment_group_mean
summary(regression_model_gerber)
t_test_result_gerber <- t.test(vote ~ treat, data = gerber_data)
t_test_result_gerber
#| message: false
#| warning: false
library(tidyverse)
library(skimr) # Tidy summary statistics table
library(estimatr) # For "lm_robust"
load("TN_STAR_for_PS2_Bonus.RData")
star |> glimpse()
star |> skim()
ggplot(star, aes(y = std_math_score_k)) +
geom_boxplot() +
labs(y = "Standardized math score in Kindergarten")
View(star)
ggplot(star, aes(x = white, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Race",
x= "Student Race",
y= "Standard Math Score",
fill="Student Race")+
scale_fill_manual(values = c("0"="lightblue","1"="pink"),
labels = c("Non-White Students", "White Students"))+
theme_minimal()
ggplot(star, aes(x = treat, y = std_math_score_k, fill = treat))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Treatment",
x= "Treatment Status",
y= "Standard Math Score",
fill="Treatment")+
scale_fill_manual(values = c("0"="orange","1"="navyblue"),
labels = c("Control Group", "Treatment Group"))+
theme_minimal()
ggplot(star, aes(x = treat, y = std_math_score_k, fill = treat))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Treatment",
x= "Treatment Status",
y= "Standard Math Score",
fill="Treatment")+
scale_fill_manual(values = c("0"="orange","1"="blue"),
labels = c("Control Group", "Treatment Group"))+
theme_minimal()
ggplot(star, aes(x = treat, y = std_math_score_k, fill = treat))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Treatment",
x= "Treatment Status",
y= "Standard Math Score",
fill="Treatment")+
scale_fill_manual(values = c("0"="orange","1"="lightblue"),
labels = c("Control Group", "Treatment Group"))+
theme_minimal()
ggplot(star, aes(x = treat, y = std_math_score_k, fill = treat))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Treatment",
x= "Treatment Status",
y= "Standard Math Score",
fill="Treatment")+
scale_fill_manual(values = c("0"="orange","1"="turquoise"),
labels = c("Control Group", "Treatment Group"))+
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Student Race and Treatment Status",
x= "Treatment Status",
y = "Standard Math Scores",
fill="Student Race")+
scale_fill_manual(values = c("0" = "lightblue", "1" = "pink"),
labels = c("Non-White Students", "White Students"))+
theme_minimal()
lm_robust(std_math_score_k ~ treat, data = star)
lm_robust(std_math_score_k ~ white, data = star)
regression_model_white <-
lm(test_score ~ std_math_score, data = star[star$white == "1",])
regression_model_white <-
lm(std_math_score ~ white, data = star[star$white == "1"])
regression_model_white <-
lm(std_math_score ~ white, data = star[star$white == "white"])
regression_model_white <-
lm(std_math_score ~ white, data = star[star$white == "1"])
lm(std_math_score ~ white, data = star[star$white)
lm(std_math_score ~ 5768, data = star[star$white == "1")
lm_robust(std_math_score_k ~ white, data = star)
lm(std_math_score ~ 1, data = star[star$white == "1")
lm(std_math_score ~ 1, data = star[star$white == "white")
lm(std_math_score ~ 1, data = star[star$white == "0")
lm(std_math_score ~ 1, data = star[star$white == "white")
lm(std_math_score ~ 1, data = star[star$white == "white",)
regression_model_white <-
lm(std_math_score ~ 1, data = star[star$white == "white"],)
lm(std_math_score ~ 1, data = star[star$white == "white", ])
lm(std_math_score_k ~ 1, data = star[star$white == "white", ])
lm(std_math_score_k ~ 1, data = star[star$white == 1, ])
lm_robust(std_math_score_k ~ 1, data = star[star$white == 1,])
white_students_regression <- lm_robust(std_math_score_k ~ 1, data = star[star$white == 1,])
white_students_regression
non_white_students_regression <- lm_robust(std_math_score_k ~ 1, data = star[star$white == 0,])
print(white_students_regression)
print(non_white_students_regression)
# Regression for White students
white_students_regression <- lm_robust(std_math_score_k ~ 1, data = star[star$white == 1,])
# Regression for Non-White students
non_white_students_regression <- lm_robust(std_math_score_k ~ 1, data = star[star$white == 0,])
white_students_regression
non_white_students_regression
model_interaction <- lm(std_math_score ~ 1 * white, data = star)
model_interaction <- lm(std_math_score_k ~ 1 * white, data = star)
summary(model_interaction)
unadjusted_model <- lm_robust(std_math_score_k ~ 1, data = star)
summary(unadjusted_model)
unadjusted_se <- summary(unadjusted_model)$coefficients["1", "Std. Error"]
summary(unadjusted_model)
unadjusted_se <- summary(unadjusted_model)$coefficients["1", "Std. Error"]
summary(unadjusted_model)
unadjusted_se <- summary(unadjusted_model)$coefficients["class_size", "Std. Error"]
summary(unadjusted_model)
unadjusted_se <- summary(unadjusted_model)$coefficients["0", "Std. Error"]
unadjusted_se <- summary(unadjusted_model)$coefficients["1", "Std. Error"]
unadjusted_se <- summary(unadjusted_model)$coefficients[1, "Std. Error"]
print(unadjusted_se)
summary(unadjusted_model)
print(unadjusted_se)
adjusted_model <- lm_robust(std_math_score_k ~ 1 + 1 + 1 , data = star)
summary(adjusted_model)
adjusted_se <- summary(adjusted_model)$coefficients[1, "Std. Error"]
print(adjusted_se)
reduction_in_se <- unadjusted_se - adjusted_se
reduction_in_se
percentage_reduction <- (reduction_in_se / unadjusted_se) * 100
print(percentage_reduction)
cat("Unadjusted Standard Error:", unadjusted_se, "\n")
cat("Adjusted Standard Error:", adjusted_se, "\n")
cat("Reduction in Standard Error:", reduction_in_se, "\n")
cat("Percentage Reduction in SE:", percentage_reduction, "%\n")
#| message: false
#| warning: false
library(tidyverse)
library(skimr) # Tidy summary statistics table
library(estimatr) # For "lm_robust"
load("TN_STAR_for_PS2_Bonus.RData")
star |> glimpse()
star |> skim()
ggplot(star, aes(y = std_math_score_k)) +
geom_boxplot() +
labs(y = "Standardized math score in Kindergarten")
ggplot(star, aes(x = white, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Race",
x= "Student Race",
y= "Standard Math Score",
fill="Student Race")+
scale_fill_manual(values = c("0"="lightblue","1"="pink"),
labels = c("Non-White Students", "White Students"))+
theme_minimal()
ggplot(star, aes(x = treat, y = std_math_score_k, fill = treat))+
geom_boxplot()+
labs(title = "Distribution of Math Test Scores by Treatment",
x= "Treatment Status",
y= "Standard Math Score",
fill="Treatment")+
scale_fill_manual(values = c("0"="orange","1"="turquoise"),
labels = c("Control Group", "Treatment Group"))+
theme_minimal()
ggplot(star, aes( x = treat, y = std_math_score_k, fill = white))+
geom_boxplot()+
labs(title = "Distribution of Test Scores by Student Race and Treatment Status",
x= "Treatment Status",
y = "Standard Math Scores",
fill="Student Race")+
scale_fill_manual(values = c("0" = "lightblue", "1" = "pink"),
labels = c("Non-White Students", "White Students"))+
theme_minimal()
lm_robust(std_math_score_k ~ treat, data = star)
# Regression for White students
white_students_regression <- lm_robust(std_math_score_k ~ 1, data = star[star$white == 1,])
# Regression for Non-White students
non_white_students_regression <- lm_robust(std_math_score_k ~ 1, data = star[star$white == 0,])
white_students_regression
non_white_students_regression
model_interaction <- lm(std_math_score_k ~ 1 * white, data = star)
summary(model_interaction)
# Identify pretreatment covariates: boy (gender), white (race)
# Fit a linear regression model that includes the treatment variable and these covariates.
unadjusted_model <- lm_robust(std_math_score_k ~ 1, data = star)
summary(unadjusted_model)
# Extract the standard error for the treatment effect (class_size = small = 1)
unadjusted_se <- summary(unadjusted_model)$coefficients[1, "Std. Error"]
print(unadjusted_se)
# Fit the Adjusted Model (With Pre-Treatment Covariates)
# adjusted_model <- lm(std_math_score ~ class_size + race + gender + parent_education, data = star)
adjusted_model <- lm_robust(std_math_score_k ~ 1 + 1 + 1 , data = star)
summary(adjusted_model)
# Extract the standard error for the treatment effect (class_size)
adjusted_se <- summary(adjusted_model)$coefficients[1, "Std. Error"]
print(adjusted_se)
# Let's compare the standard errors
reduction_in_se <- unadjusted_se - adjusted_se
reduction_in_se
percentage_reduction <- (reduction_in_se / unadjusted_se) * 100
print(percentage_reduction)
cat("Unadjusted Standard Error:", unadjusted_se, "\n")
cat("Adjusted Standard Error:", adjusted_se, "\n")
cat("Reduction in Standard Error:", reduction_in_se, "\n")
cat("Percentage Reduction in SE:", percentage_reduction, "%\n")
library(tidyverse)
library(sandwich)
library(lmtest)
library(estimatr)
#load the dataset
read.csv("TN_STAR_reduced.csv") ->star_data
head(star_data)
# Summary statistics for Control Group
# n
n_control <-
star_data |>
filter(treat==0) |>
count()
# mimimum
minimum_value_control <- min(star_data$math_score[star_data$treat==0])
# mean
mean_value_control <- mean(star_data$math_score[star_data$treat==0])
# standard deviation
sd_value_control <- sd(star_data$math_score[star_data$treat==0])
# maximum value
maximum_value_control <- max(star_data$math_score[star_data$treat==0])
print(n_control)
print(minimum_value_control)
print(mean_value_control)
print(sd_value_control)
print(maximum_value_control)
# Treatment group summary statistics
#n
n_treat <-
star_data |>
filter(treat==1) |>
count()
# minimum
minimum_value_treat <- min(star_data$math_score[star_data$treat==1])
# mean
mean_value_treat <- mean(star_data$math_score[star_data$treat==1])
# standard_deviation
sd_value_treat <- sd(star_data$math_score[star_data$treat==1])
# maximum value
maximum_value_treat <- max(star_data$math_score[star_data$treat==1])
print(n_treat)
print(minimum_value_treat)
print(mean_value_treat)
print(sd_value_treat)
print(maximum_value_treat)
# Regression model
regression_model <-
lm(math_score ~ treat, data = star_data)
regression_model
# Robust standard errors
robust_covariance <- vcovHC(regression_model, type = "HC1") #robust covariance..."HC1" is usually a good default choice
robust_covariance
# Robust standard errors
robust_sd_errors <- coeftest(regression_model, vcov=robust_covariance)
robust_sd_errors
control_group_mean <- mean(star_data$math_score[star_data$treat==0], na.rm = TRUE)
control_group_mean
treatment_group_mean <- mean(star_data$math_score[star_data$treat==1], na.rm = TRUE)
treatment_group_mean
summary(regression_model)
t_test_result <- t.test(math_score ~ treat, data = star_data)
t_test_result
read.csv("Gerber_APSR_Reduced.csv") ->gerber_data
head(gerber_data)
# regression model
regression_model_gerber <- lm(vote ~ treat, data = gerber_data)
regression_model_gerber
# Robust standard errors
robust_covariance_gerber <- vcovHC(regression_model_gerber, type = "HC1") #robust covariance..."HC1" is usually a good default choice
robust_covariance_gerber
# Robust standard errors
robust_sd_errors_gerber <- coeftest(regression_model_gerber, vcov=robust_covariance_gerber)
robust_sd_errors_gerber
gerber_control_group_mean <- mean(gerber_data$vote[gerber_data$treat==0], na.rm=TRUE)
gerber_control_group_mean
gerber_treatment_group_mean <- mean(gerber_data$vote[gerber_data$treat==1], na.rm = TRUE)
gerber_treatment_group_mean
summary(regression_model_gerber)
t_test_result_gerber <- t.test(vote ~ treat, data = gerber_data)
t_test_result_gerber
summary(robust_sd_errors)
robust_sd_errors
summary(regression_model)
sudo xcodebuild -license accept
setwd("/Users/jsupeyo/Library/CloudStorage/GoogleDrive-jsupeyo@berkeley.edu/My Drive/University of California, Berkeley/1. Goldman School of Public Policy/1. Classes/2. 2024 Fall/PUB POL 249: Statistics for Program Evaluation/Assignments/Code/Statistics4PE")
library(tidyverse)
library(sandwich)
library(lmtest)
library(estimatr)
#load the dataset
read.csv("TN_STAR_reduced.csv") ->star_data
head(star_data)
# Summary statistics for Control Group
# n
n_control <-
star_data |>
filter(treat==0) |>
count()
# mimimum
minimum_value_control <- min(star_data$math_score[star_data$treat==0])
# mean
mean_value_control <- mean(star_data$math_score[star_data$treat==0])
# standard deviation
sd_value_control <- sd(star_data$math_score[star_data$treat==0])
# maximum value
maximum_value_control <- max(star_data$math_score[star_data$treat==0])
print(n_control)
print(minimum_value_control)
print(mean_value_control)
print(sd_value_control)
print(maximum_value_control)
# Treatment group summary statistics
#n
n_treat <-
star_data |>
filter(treat==1) |>
count()
# minimum
minimum_value_treat <- min(star_data$math_score[star_data$treat==1])
# mean
mean_value_treat <- mean(star_data$math_score[star_data$treat==1])
# standard_deviation
sd_value_treat <- sd(star_data$math_score[star_data$treat==1])
# maximum value
maximum_value_treat <- max(star_data$math_score[star_data$treat==1])
print(n_treat)
print(minimum_value_treat)
print(mean_value_treat)
print(sd_value_treat)
print(maximum_value_treat)
# Regression model
regression_model <-
lm(math_score ~ treat, data = star_data)
regression_model
# Robust standard errors
robust_covariance <- vcovHC(regression_model, type = "HC1") #robust covariance..."HC1" is usually a good default choice
robust_covariance
# Robust standard errors
robust_sd_errors <- coeftest(regression_model, vcov=robust_covariance)
robust_sd_errors
control_group_mean <- mean(star_data$math_score[star_data$treat==0], na.rm = TRUE)
control_group_mean
treatment_group_mean <- mean(star_data$math_score[star_data$treat==1], na.rm = TRUE)
treatment_group_mean
summary(regression_model)
t_test_result <- t.test(math_score ~ treat, data = star_data)
t_test_result
read.csv("Gerber_APSR_Reduced.csv") ->gerber_data
head(gerber_data)
# regression model
regression_model_gerber <- lm(vote ~ treat, data = gerber_data)
regression_model_gerber
# Robust standard errors
robust_covariance_gerber <- vcovHC(regression_model_gerber, type = "HC1") #robust covariance..."HC1" is usually a good default choice
robust_covariance_gerber
# Robust standard errors
robust_sd_errors_gerber <- coeftest(regression_model_gerber, vcov=robust_covariance_gerber)
robust_sd_errors_gerber
gerber_control_group_mean <- mean(gerber_data$vote[gerber_data$treat==0], na.rm=TRUE)
gerber_control_group_mean
gerber_treatment_group_mean <- mean(gerber_data$vote[gerber_data$treat==1], na.rm = TRUE)
gerber_treatment_group_mean
summary(regression_model_gerber)
t_test_result_gerber <- t.test(vote ~ treat, data = gerber_data)
t_test_result_gerber
library(tidyverse)
library(sandwich)
library(lmtest)
library(estimatr)
#load the dataset
read.csv("TN_STAR_reduced.csv") ->star_data
head(star_data)
# Summary statistics for Control Group
# n
n_control <-
star_data |>
filter(treat==0) |>
count()
# mimimum
minimum_value_control <- min(star_data$math_score[star_data$treat==0])
# mean
mean_value_control <- mean(star_data$math_score[star_data$treat==0])
# standard deviation
sd_value_control <- sd(star_data$math_score[star_data$treat==0])
# maximum value
maximum_value_control <- max(star_data$math_score[star_data$treat==0])
print(n_control)
print(minimum_value_control)
print(mean_value_control)
print(sd_value_control)
print(maximum_value_control)
# Treatment group summary statistics
#n
n_treat <-
star_data |>
filter(treat==1) |>
count()
# minimum
minimum_value_treat <- min(star_data$math_score[star_data$treat==1])
# mean
mean_value_treat <- mean(star_data$math_score[star_data$treat==1])
# standard_deviation
sd_value_treat <- sd(star_data$math_score[star_data$treat==1])
# maximum value
maximum_value_treat <- max(star_data$math_score[star_data$treat==1])
print(n_treat)
print(minimum_value_treat)
print(mean_value_treat)
print(sd_value_treat)
print(maximum_value_treat)
# Regression model
regression_model <-
lm(math_score ~ treat, data = star_data)
regression_model
# Robust standard errors
robust_covariance <- vcovHC(regression_model, type = "HC1") #robust covariance..."HC1" is usually a good default choice
robust_covariance
# Robust standard errors
robust_sd_errors <- coeftest(regression_model, vcov=robust_covariance)
robust_sd_errors
control_group_mean <- mean(star_data$math_score[star_data$treat==0], na.rm = TRUE)
control_group_mean
treatment_group_mean <- mean(star_data$math_score[star_data$treat==1], na.rm = TRUE)
treatment_group_mean
summary(regression_model)
t_test_result <- t.test(math_score ~ treat, data = star_data)
t_test_result
read.csv("Gerber_APSR_Reduced.csv") ->gerber_data
head(gerber_data)
# regression model
regression_model_gerber <- lm(vote ~ treat, data = gerber_data)
regression_model_gerber
# Robust standard errors
robust_covariance_gerber <- vcovHC(regression_model_gerber, type = "HC1") #robust covariance..."HC1" is usually a good default choice
robust_covariance_gerber
# Robust standard errors
robust_sd_errors_gerber <- coeftest(regression_model_gerber, vcov=robust_covariance_gerber)
robust_sd_errors_gerber
gerber_control_group_mean <- mean(gerber_data$vote[gerber_data$treat==0], na.rm=TRUE)
gerber_control_group_mean
gerber_treatment_group_mean <- mean(gerber_data$vote[gerber_data$treat==1], na.rm = TRUE)
gerber_treatment_group_mean
summary(regression_model_gerber)
t_test_result_gerber <- t.test(vote ~ treat, data = gerber_data)
t_test_result_gerber
# Load libraries
library(tidyr)
library(estimatr)
library(ggplot2)
library(tidyr)
library(tidyverse)
# Load libraries
library(tidyverse)
library(estimatr)
library(ggplot2)
?data
un_data |> load("data")
view(data)
command(data)
command_data(data)
command data(data)
data()
load(data)
data(data)
